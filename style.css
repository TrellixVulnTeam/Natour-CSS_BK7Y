  
/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/


* { 
    /* Browsers will add some form of padding /margin to page*/
    margin: 0; 
    padding: 0; 
    /* Border box will change box model so no padding/margin will influence height /width of page  */
    box-sizing: border-box;
}

html { 
    /* Set base font size to 10 pixels because it is easy to calculate rem: helps with responsive design  */
    font-size: 10px;
}


body { 
    /* everything related to font will be specified here */
    font-family: 'Lato', sans-serif; 
    font-weight: 400; 
    /* font-size: 1.6rem; */
    line-height: 1.7;
    color: #777; 
    padding: 3rem; 
}

.header { 
    height: 95vh; 
    /* can also specify another direction, to right bottom will make gradient cross diagonally */
    /* third argument specifies the opacity  */
    background-image: linear-gradient(
        to right bottom,
        rgb(126, 213, 111, 0.8), 
        rgb(40, 180, 133, 0.8)), 
        url(img/hero.jpg);
    /* whatever the width of the viewport it will always try to fit the element to the box  */
    background-size: cover;
    /* ensures whatever the size, the top of the image always stays at the top of the container  */
    background-position: top;
    /* Start at top left corner and move clockwise when specifying corners */
    /* Making it 75vh will make it responsive to the 95vh you specified above */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative; 
}

.logo-box { 
    position: absolute; 
    top: 4rem; 
    left: 4rem; 
}

.logo { 
    height: 3.5rem; 
}

.text-box { 
    position: absolute;
    top: 40%; 
    left: 50%;
    /* That's because this 50% is no longer relative to parent element, but to 50% of the height and width of itself.*/
    transform: translate(-50%, -50%);
    /* see .btn-white display. inline-block elements are treated as text, so to center the btn element you can use */
    text-align: center;
}

.heading-primary { 
    color: #fff; 
    text-transform: uppercase;
    /* this property determines whether the back part of an element when we transform it remains visible or hidden */
    /* this is a hack that fixes some type of glitch that can happen with animations. */
    backface-visibility: hidden;
    margin-bottom: 6rem; 
}

.heading-primary-main { 
    /* Use block elements to stack this on top of the sub heading */
    /* Block elements occupy entire width they have available and create line breaks after and before them */
    display: block;
    font-size: 6rem; 
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* Ease out will start faster then will ease on speed towards end */
    animation: moveInLeft 3s ease-out; 
    /* animation-delay: 2s; delay before animation happens */
    /* animation-iteration-count: 3; how many times animation will happen */
}

.heading-primary-sub { 
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 3s ease-out;
}

@keyframes moveInLeft { 
    0% { 
        opacity: 0; 
        transform: translateX(-10rem);
    }
    80% { 
        transform: translateX(1rem);
    }
    100% { 
        opacity: 1; 
        transform: translate(0) 
    }
}


@keyframes moveInRight { 
    0% { 
        opacity: 0; 
        transform: translateX(10rem);
    }
    80% { 
        transform: translateX(-1rem);
    }
    100% { 
        opacity: 1; 
        transform: translate(0) 
    }
}

@keyframes moveInBottom { 
    0% { 
        opacity: 0; 
        transform: translateY(3rem);
    }
    100% { 
        opacity: 1; 
        transform: translate(0) 
    }
}

/* Link is a pseudo-class of a selector, used to style elements under certain conditions */
.btn:link, 
.btn:visited { 
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem; 
    /* Should always do this if you want to give some padding, or height/width to elements */
    display: inline-block;
    border-radius: 10rem; 
    transition: all .2s; 
    position: relative;
}

.btn:hover { 
    transform: translateY(-3rem);
    /* 1. x-value shadow, 2. y-value shadow, 3. blur, 4: color shadow */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active { 
    transform: translateY(-1rem);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn-white { 
    background-color: #fff;
    color: #777;
}

.btn::after { 
    /* In order for after pseudo element to appear, need to specify content property. */
    /* ALWAYS necessary, have to speciify otherwise it wont appear, and the same applies to the display property  */
    content: ""; 
    display: inline-block; 
    height: 100%; 
    width: 100%; 
    border-radius: 10rem; 
    position: absolute; 
    top: 0; 
    left: 0; 
    z-index: -1;
    /* You always put the transition property on the initial state */
    transition: all .4s;
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after { 
    transform: scaleX(1.3), scaleY(1.5); 
    /* Putting to opacity zero is the trick for fading something out  */
    opacity: 0; 
}

.btn-animated { 
    animation: moveInBottom 1s ease-out .5s;
    /* What this does is automatically apply the styles to 0% before the animation starts */
    animation-fill-mode: backwards;
}